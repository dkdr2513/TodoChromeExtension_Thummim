{"version":3,"sources":["components/Form.js","components/Todo.js","components/TodoList.js","App.js","serviceWorker.js","index.js"],"names":["Form","setInputText","todos","setTodos","inputText","setStatus","value","onChange","e","console","log","target","type","className","onClick","preventDefault","text","completed","id","Math","random","name","Todo","todo","map","item","filter","el","TodoList","filteredTodos","key","App","useState","status","setFilteredTodos","useEffect","getLocalTodos","filterHandler","saveLocalTodos","localStorage","setItem","JSON","stringify","getItem","todoLocal","parse","src","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.735d3621.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Form = ({setInputText,todos,setTodos,inputText,setStatus}) => {\r\n    // i can write javascript code and function\r\n    const inputTextHandler = (e) => {\r\n        // getting value from input - can see in f12 console\r\n        console.log(e.target.value);\r\n        setInputText(e.target.value);\r\n    }\r\n    // not making input stay there forever without clearing\r\n    const submitTodoHandler = (e) => {\r\n        e.preventDefault();\r\n        // spread todos\r\n        setTodos([\r\n            ...todos, {text: inputText, completed: false, id: Math.random() * 1000}\r\n        ]);\r\n        // reset State to nothing\r\n        setInputText(\"\");\r\n    }\r\n    const statusHandler = (e) => {\r\n        setStatus(e.target.value);\r\n    }\r\n    return (\r\n        <form>\r\n            {/* when onchange it runs inputTextHandler  */}\r\n            <input value={inputText} onChange={inputTextHandler} type=\"text\" className=\"todo-input\" />\r\n            <button onClick={submitTodoHandler} className=\"todo-button\" type=\"submit\">\r\n                <i className=\"fas fa-plus-square\"></i>\r\n            </button>\r\n            <div className=\"select\">\r\n                <select onChange={statusHandler} name=\"todos\" className=\"filter-todo\">\r\n                    <option value=\"all\">All</option>\r\n                    <option value=\"completed\">Completed</option>\r\n                    <option value=\"uncompleted\">Uncompleted</option>\r\n                </select>\r\n            </div>\r\n        </form>\r\n    );\r\n};\r\n\r\nexport default Form;","import React from 'react';\r\n\r\nconst Todo = ({text, todo, todos, setTodos}) => {\r\n    // Events\r\n    const deleteHandler = () => {\r\n        // todos.filter goes through every state and cheks\r\n        setTodos(todos.filter(el => el.id !== todo.id));\r\n    };\r\n    const completeHandler = () => {\r\n        // map does doing over each state\r\n        setTodos(todos.map((item) => {\r\n            if (item.id === todo.id) {\r\n                return {\r\n                    // whatever it had\r\n                    ...item, completed: !item.completed\r\n                };\r\n            };\r\n            return item;           \r\n        }));\r\n    }\r\n    return(\r\n        <div className=\"todo\">\r\n            <li className={`todo-item ${todo.completed ? \"completed\" : \"\"}`}>{text}</li>\r\n            <button onClick={completeHandler} className=\"complete-btn\">\r\n                <i className=\"fas fa-check\"></i>\r\n            </button>\r\n            <button onClick={deleteHandler} className=\"trash-btn\">\r\n                <i className=\"fas fa-trash\"></i>\r\n            </button>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Todo;","import React from 'react';\r\n// Import Components\r\nimport Todo from './Todo';\r\nconst TodoList = ({todos, setTodos, filteredTodos}) => {\r\n    return (\r\n        <div className=\"todo-container\">\r\n            <ul className=\"todo-list\">\r\n                {filteredTodos.map((todo) => (\r\n                    <Todo \r\n                        setTodos={setTodos} \r\n                        todos={todos} \r\n                        key={todo.id} \r\n                        todo={todo}\r\n                        text={todo.text} \r\n                    />\r\n                ))}\r\n            </ul>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default TodoList;","import React, {useState,userEffect, useEffect} from 'react';\nimport './App.css';\n//Importing Components\nimport Form from './components/Form';\nimport TodoList from './components/TodoList';\n// *** REACT UPDATE ACCORDING TO STATE ***\nfunction App() {\n  // States\n  const [inputText, setInputText] = useState(\"\");\n  const [todos, setTodos] = useState([]);\n  const [status, setStatus] = useState('all');\n  const [filteredTodos, setFilteredTodos] = useState([]);\n\n  // RUN ONCE\n  useEffect(() => {\n    getLocalTodos();\n  }, [])\n  // use effect - running function whenever we want (default - runs when start)\n  useEffect(() => {\n    filterHandler();\n    saveLocalTodos();\n  }, [todos, status]) // everytime todo, this function is run\n\n  // Functions\n  const filterHandler = () => {\n    switch(status) {\n      case 'completed':\n        setFilteredTodos(todos.filter(todo => todo.completed === true));\n        break;\n      case 'uncompleted':\n        setFilteredTodos(todos.filter(todo => todo.completed === false));\n        break;\n      default:\n        setFilteredTodos(todos);\n        break;\n    }\n  }\n  // savve to loccal\n  const saveLocalTodos = () => {\n    localStorage.setItem('todos', JSON.stringify(todos));\n  }\n  const getLocalTodos = () => {\n    if (localStorage.getItem('todos') === null) {\n      localStorage.setItem('todos', JSON.stringify([]));\n    } else {\n      let todoLocal = JSON.parse(localStorage.getItem(\"todos\"));\n      setTodos(todoLocal);\n    }\n  }\n  return (\n    <div className=\"App\">\n      <header>\n        <h1>\n          <img src=\"title.png\" />\n        </h1>\n      </header>\n      {/* now i can use InputText everywhere */}\n      <Form \n        inputText={inputText} \n        todos={todos} \n        setTodos={setTodos} \n        setInputText={setInputText}\n        setStatus={setStatus}\n      />\n      <TodoList \n        setTodos={setTodos} \n        todos={todos}\n        filteredTodos={filteredTodos}\n      />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}